// Copyright (C) 2024  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/11/2024 19:05:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg botaoPlaca;
reg clock;
reg [3:0] entradaDeDadosIO;
reg reset;
// wires                                               
wire [6:0] centena;
wire [1:0] controlIO;
wire [6:0] dezena;
wire [4:0] enRD;
wire [4:0] enRS;
wire [4:0] enRT;
wire halt;
wire [3:0] testeD;
wire [31:0] testeIN;
wire [31:0] testeImediato;
wire [31:0] testeMux;
wire [31:0] testeOP;
wire [31:0] testePC;
wire [31:0] testeRS;
wire [31:0] testeReg;
wire [2:0] testeSelMux;
wire testeSinal;
wire testeStatus;
wire [31:0] testeUla;
wire [31:0] testeout;
wire testepulso;
wire [6:0] unidade;

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.botaoPlaca(botaoPlaca),
	.centena(centena),
	.clock(clock),
	.controlIO(controlIO),
	.dezena(dezena),
	.enRD(enRD),
	.enRS(enRS),
	.enRT(enRT),
	.entradaDeDadosIO(entradaDeDadosIO),
	.halt(halt),
	.reset(reset),
	.testeD(testeD),
	.testeIN(testeIN),
	.testeImediato(testeImediato),
	.testeMux(testeMux),
	.testeOP(testeOP),
	.testePC(testePC),
	.testeRS(testeRS),
	.testeReg(testeReg),
	.testeSelMux(testeSelMux),
	.testeSinal(testeSinal),
	.testeStatus(testeStatus),
	.testeUla(testeUla),
	.testeout(testeout),
	.testepulso(testepulso),
	.unidade(unidade)
);
initial 
begin 
#1000000 $finish;
end 

// botaoPlaca
initial
begin
	botaoPlaca = 1'b0;
end 

// clock
initial
begin
	clock = 1'b0;
end 
// entradaDeDadosIO[ 3 ]
initial
begin
	entradaDeDadosIO[3] = 1'b0;
end 
// entradaDeDadosIO[ 2 ]
initial
begin
	entradaDeDadosIO[2] = 1'b0;
end 
// entradaDeDadosIO[ 1 ]
initial
begin
	entradaDeDadosIO[1] = 1'b0;
end 
// entradaDeDadosIO[ 0 ]
initial
begin
	entradaDeDadosIO[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
endmodule

